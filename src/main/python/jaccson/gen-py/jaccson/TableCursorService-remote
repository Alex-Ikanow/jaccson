#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import TableCursorService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void insertBatch(string db, string coll,  json)'
  print '  void update(string db, string coll, string query, string mods)'
  print '  i32 find(string db, string coll, string query, string select)'
  print '  string findOne(string db, string coll, string query, string select)'
  print '  string get(string db, string coll, string oid)'
  print '  void remove(string db, string coll, string query)'
  print '  void flush(string db, string coll)'
  print '  void ensureIndex(string db, string coll, string obj, bool drop)'
  print '  void dropIndex(string db, string coll, string obj)'
  print '  void compact(string db, string coll)'
  print '  void drop(string db, string coll)'
  print '   nextBatch(i32 cursor)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TableCursorService.Client(protocol)
transport.open()

if cmd == 'insertBatch':
  if len(args) != 3:
    print 'insertBatch requires 3 args'
    sys.exit(1)
  pp.pprint(client.insertBatch(args[0],args[1],eval(args[2]),))

elif cmd == 'update':
  if len(args) != 4:
    print 'update requires 4 args'
    sys.exit(1)
  pp.pprint(client.update(args[0],args[1],args[2],args[3],))

elif cmd == 'find':
  if len(args) != 4:
    print 'find requires 4 args'
    sys.exit(1)
  pp.pprint(client.find(args[0],args[1],args[2],args[3],))

elif cmd == 'findOne':
  if len(args) != 4:
    print 'findOne requires 4 args'
    sys.exit(1)
  pp.pprint(client.findOne(args[0],args[1],args[2],args[3],))

elif cmd == 'get':
  if len(args) != 3:
    print 'get requires 3 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],args[1],args[2],))

elif cmd == 'remove':
  if len(args) != 3:
    print 'remove requires 3 args'
    sys.exit(1)
  pp.pprint(client.remove(args[0],args[1],args[2],))

elif cmd == 'flush':
  if len(args) != 2:
    print 'flush requires 2 args'
    sys.exit(1)
  pp.pprint(client.flush(args[0],args[1],))

elif cmd == 'ensureIndex':
  if len(args) != 4:
    print 'ensureIndex requires 4 args'
    sys.exit(1)
  pp.pprint(client.ensureIndex(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'dropIndex':
  if len(args) != 3:
    print 'dropIndex requires 3 args'
    sys.exit(1)
  pp.pprint(client.dropIndex(args[0],args[1],args[2],))

elif cmd == 'compact':
  if len(args) != 2:
    print 'compact requires 2 args'
    sys.exit(1)
  pp.pprint(client.compact(args[0],args[1],))

elif cmd == 'drop':
  if len(args) != 2:
    print 'drop requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop(args[0],args[1],))

elif cmd == 'nextBatch':
  if len(args) != 1:
    print 'nextBatch requires 1 args'
    sys.exit(1)
  pp.pprint(client.nextBatch(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
